openapi: 3.0.3
info:
  title: Sturdy Statistics API Documentation
  version: 1.0.0
  description: |-
    Access Forem articles, users and other resources via API.
            For a real-world example of Forem in action, check out [DEV](https://www.dev.to).
            All endpoints can be accessed with the 'api_key' header and a accept header, but
            some of them are accessible publicly without authentication.

            Dates and date times, unless otherwise specified, must be in
            the [RFC 3339](https://tools.ietf.org/html/rfc3339) format.
paths:
  /text/v1/index:
    post:
      summary: Create Index 
      tags:
        - text 
      description: >-
        This endpoint allows the client to create a new index.

        "Indexes" are all the core building block for storing, indexing and
        querying data.
      operationId: createIndex 
      parameters: []
      responses:
        '200':
          description: New Index Information
          content:
            application/json:
              example:
                index_id: index_a3cd8f52a42b4ee3841dacfe9408d4cd
                name: Index Name 
                state: untrained 
              schema:
                $ref: '#/components/schemas/IndexInfo'
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                error: unauthorized
                status: 401
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createIndexInput'
    get:
      summary: List Indices
      tags:
        - text
      description: Returns a list of all created indices tied to your api key.
      operationId: listIndicies 
      parameters:
        - name: api_key
          in: query
          required: true
          description: API Key.
          schema:
            type: string
      responses:
        '200':
          description: A list of index metadata
          content:
            application/json:
              example:
                - index_id: index_a3cd8f52a42b4ee3841dacfe9408d4cd
                  name: Index_Name_1 
                  state: untrained 
              schema:
                items:
                  $ref: '#/components/schemas/IndexInfo'
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                error: unauthorized
                status: 401
  /text/v1/index/{index_id}:
    get:
      summary: Single Index Info
      tags:
        - text
      description: Returns metadata of a specified index.
      operationId: getSingleIndexInfo 
      parameters:
        - name: index_id
          in: path
          required: true
          schema:
            type: string 
        - name: api_key
          in: query
          required: true
          description: API Key.
          schema:
            type: string
        - name: index_id 
          in: query
          required: true
          description: Index Id.
          schema:
            type: string
      responses:
        '200':
          description: A dictionary of index metadata
          content:
            application/json:
              example:
                index_id: index_a3cd8f52a42b4ee3841dacfe9408d4cd
                name: Index_Name_1 
                state: untrained 
              schema:
                $ref: '#/components/schemas/IndexInfo'
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                error: unauthorized
                status: 401

  /text/v1/index/{index_id}/doc:
    post:
      summary: Upload Docs 
      tags:
        - text 
      description: >-
        TODO
      operationId: writeDocs 
      parameters: 
        - name: index_id
          in: path
          required: true
          schema:
            type: string 
      responses:
        '200':
          description: Index Information
          content:
            application/json:
              example:
                - doc_id: "doc1"
                  field_you_choose_for_predictions_1: 0.84
                  another_field_you_choose_for_predictions: 0.04
                - doc_id: "doc2"
                  field_you_choose_for_predictions_1: 0.32
                  another_field_you_choose_for_predictions: 0.02
              schema:
                items:
                  $ref: '#/components/schemas/DocPredictions'
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                error: unauthorized
                status: 401
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocUploadInfo'

  /text/v1/index/{index_id}/doc/commit:
    post:
      summary: Commit Docs 
      tags:
        - text 
      description: >-
        TODO
      operationId: commitDocs 
      parameters: 
        - name: index_id
          in: path
          required: true
          schema:
            type: string 
      responses:
        '200':
          description: Index Information
          content:
            application/json:
              example:
                index_id: index_a3cd8f52a42b4ee3841dacfe9408d4cd
                name: Index Name 
                state: ready 
              schema:
                $ref: '#/components/schemas/IndexInfo'
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                error: unauthorized
                status: 401
      requestBody:
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/ApiKeyOnly'

  /text/v1/index/{index_id}/doc/unstage:
    post:
      summary: Unstage Docs 
      tags:
        - text 
      description: >-
        TODO
      operationId: unstageDocs 
      parameters: 
        - name: index_id
          in: path
          required: true
          schema:
            type: string 
      responses:
        '200':
          description: Index Information
          content:
            application/json:
              example:
                index_id: index_a3cd8f52a42b4ee3841dacfe9408d4cd
                name: Index Name 
                state: ready 
              schema:
                $ref: '#/components/schemas/IndexInfo'
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                error: unauthorized
                status: 401
      requestBody:
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/ApiKeyOnly'

  /text/v1/index/{index_id}/train:
    post:
      summary: Train an Index 
      tags:
        - text 
      description: >-
        This endpoint trains index on all docs that have been uploaded to it.
        Once an index has been trained, the docs are queryable and the model
        is able to add new docs to the query or to run predictions.
      operationId: trainIndex 
      parameters: 
        - name: index_id
          in: path
          required: true
          schema:
            type: string 
      responses:
        '200':
          description: Index Information
          content:
            application/json:
              example:
                index_id: index_a3cd8f52a42b4ee3841dacfe9408d4cd
                name: Index Name 
                state: training 
              schema:
                $ref: '#/components/schemas/IndexInfo'
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                error: unauthorized
                status: 401
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/trainIndexParameters'

servers:
  - url: https://lit.review/api
    description: Production server
security:
  - api_key: []
components:
  securitySchemes:
    api_key:
      type: apiKey
      name: api_key
      in: query
      description: >-
        API Key authentication.

        API requires a DEV API key.
        To obtain one, please follow these steps:
          - email hello@lit.review requesting an api key
  schemas:
    ApiKeyOnly:
      description: Api Key 
      type: object
      properties:
        api_key:
          type: string
    createIndexInput:
      description: Information Needed to create an index 
      type: object
      properties:
        api_key:
          type: string
        name:
          type: string
    IndexInfo:
      description: Index Information 
      type: object
      properties:
        index_id:
          type: string
        state:
          type: string
        name:
          type: string
    trainIndexParameters:
      description: Available parameters to train an index 
      type: object
      properties:
        api_key:
          type: string
        label_field_names:
          type: array
          items: 
            type: string
        tag_field_names:
          type: array
          items: 
            type: string
        doc_hierarchy:
          type: array
          items: 
            type: string
    DocPredictions:
      description: Return value of writing docs 
      type: object
      properties:
        doc_id: 
          type: string 
        field_you_choose_for_predictions_1:
          type: number 
        another_field_you_choose_for_predictions:
          type: number
    DocUploadInfo:
      description: Example of doc upload schema 
      type: object
      properties:
        doc: 
          type: string 
        boolean_metadata_field_1:
          type: boolean
        any_name_can_be_used:
          type: boolean
        tag_metadata:
          type: array
          items: 
            type: string
        tag_metadata_any_name:
          type: array
          items: 
            type: string
        metadata_field_26:
          type: number
        any_other_metadata_name:
          type: array
          items: 
            type: integer

