openapi: 3.0.3
info:
  title: Sturdy Statistics API Documentation
  version: 1.0.0
  description: |-
    Documentation for the suite Sturdy Statistics API solutions.

paths:
  /text/v1/index:
    post:
      summary: Create Index 
      tags:
        - text 
      description: >-
        This endpoint allows the client to create a new index.

        "Indexes" are all the core building block for storing, indexing and
        querying data. If an index with the provided name already exists,
        no index will be created and the metadata of that index will be returned .
      operationId: createIndex 
      parameters: []
      responses:
        '200':
          description: New Index Information
          content:
            application/json:
              example:
                index_id: index_a3cd8f52a42b4ee3841dacfe9408d4cd
                name: Index Name 
                state: untrained 
                already_exists: false
              schema:
                $ref: '#/components/schemas/IndexInfo'
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                error: unauthorized
                status: 401
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createIndexInput'
    get:
      summary: List Indices
      tags:
        - text
      description: Returns a list of all indices tied to your api key.
      operationId: listIndicies 
      parameters:
        - name: api_key
          in: query
          required: true
          description: API Key.
          schema:
            type: string
      responses:
        '200':
          description: A list of index metadata
          content:
            application/json:
              example:
                - index_id: index_a3cd8f52a42b4ee3841dacfe9408d4cd
                  name: Index_Name_1 
                  state: untrained 
                  already_exists: false
              schema:
                items:
                  $ref: '#/components/schemas/IndexInfo'
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                error: unauthorized
                status: 401
  /text/v1/index/{index_id}:
    get:
      summary: Single Index Info
      tags:
        - text
      description: Returns metadata of a specified index.
      operationId: getSingleIndexInfo 
      parameters:
        - name: index_id
          in: path
          required: true
          schema:
            type: string 
        - name: api_key
          in: query
          required: true
          description: API Key.
          schema:
            type: string
        - name: index_id 
          in: query
          required: true
          description: Index Id.
          schema:
            type: string
      responses:
        '200':
          description: A dictionary of index metadata
          content:
            application/json:
              example:
                index_id: index_a3cd8f52a42b4ee3841dacfe9408d4cd
                name: Index_Name_1 
                state: untrained 
              schema:
                $ref: '#/components/schemas/IndexInfo'
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                error: unauthorized
                status: 401

  /text/v1/index/{index_id}/doc:
    post:
      summary: Upload Docs 
      tags:
        - text 
      description: >-
        Allows you to upload documents to an index. The docs are expected to be provided as a list of dictionaries. The contents of the document are expected to be under the key `doc`. You can provide a unique document identifier under the field `doc_id`. If no `doc_id` is provided, we will create an identifier by hashing the contents of the document.


        Any additional fields document dictionary will be stored as metadata and be available for downstream querying. These fields will also be available as training targets for classification or regression tasks.


        The api support a batch size of up to 250 docs at a time. The large the batch size, the more efficient the upload.

        This is a locking operation. A client cannot call upload, train or commit while an upload is already in progress.



        ### Nota Bene
        
        All uploaded will be saved in a `staging` index. No changes will go into effect until a `commit` request is sent.

      operationId: writeDocs 
      parameters: 
        - name: index_id
          in: path
          required: true
          schema:
            type: string 
      responses:
        '200':
          description: Index Information
          content:
            application/json:
              example:
                - doc_id: "doc1"
                  predictions:
                    field_you_choose_for_predictions_1: 0.84
                    another_field_you_choose_for_predictions: 0.04
                - doc_id: "doc2"
                  predictions:
                    field_you_choose_for_predictions_1: 0.84
                    another_field_you_choose_for_predictions: 0.04
              schema:
                items:
                  $ref: '#/components/schemas/DocPredictions'
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                error: unauthorized
                status: 401
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocUploadInfo'
    get:
      summary: Query Docs 
      tags:
        - text
      description: >-
        Interface to query your index. The api a dictionary containing three different entities.

        1. A ranked list of document objects. By default these are sorted by relevance but you can also sort by any metadata fied as well.
        Each doc contains a the text excerpt that best matches your query, all prediction values associated with the doc, all metadata
        fields associated with the doc, and a ordered list of the topics associated with each doc.

        2. A ranked list of topic objects. These are sorted by prevalance. These provide a granular overview of the data the client is querying. 
        Each topic has a `topic_id` that can be used for additional downstream queries.

        3. A ranked list of topic group objects. These are sorted by prevalance. These provide a high level overview of the topics and data the client is querying. 
        Each topic group has a `topic_group_id` that can be used for additional downstream queries.

      operationId: getDocs 
      parameters:
        - name: index_id
          in: path
          required: true
          schema:
            type: string 
        - name: api_key
          in: query
          required: true
          description: Api Key
          schema:
            type: string
        - name: query 
          in: query
          required: false
          description: >-
            A search query that can be used to filter or sort document objects. 
            By default the search will support a fuzzy match. Any word wrapped in double quotes \"word\" 
            will be treated as an exact match filter.
          schema:
            type: string
        - name: topic_ids 
          in: query
          required: false
          description: >-
            Supports filtering on a single or multiple topics. 
            Topics are unsupervised granular themes inferred from the clients data at training time that can be used to index the data.
            Expected input format is a commma seperated list of topic_ids eg `1,12,25` 
          schema:
            type: string
        - name: topic_group_id 
          in: query
          required: false
          description: >-
            Supports filtering on a single topic group. 
            Topic groups are unsupervised high level (rather than granular) categories learned from the clients data at training time that can be used to index the data.
            Expected input format is a single integer. 
          schema:
            type: integer 
        - name: filters 
          in: query
          required: false
          description: >-
            `filters` is a string of SQL conditionals that defines the boolean criteria for your query. 
            The filters clause supports any operation available in [duckdb](https://duckdb.org/docs/sql/functions/overview).
            The filters can operate on any metadata you have uploaded and on any prediction values tied to your data.
            Example filter -- `published > "2024-01-01" AND pred_sale > .8`
          schema:
            type: string
        - name: sort_by 
          in: query
          required: false
          description: >-
            Define a field by which to sort. By default, the docs will be sorted by `relevance`.
            The client can choose to sort by any value present in its metadata.
          schema:
            type: string
        - name: ascending 
          in: query
          required: false
          schema:
            type: boolean 
        - name: summarize_by 
          in: query
          required: false
          description: >-
            Define summarization depth. Options include `sentence,paragraph,doc`. Defaults to `paragraph`.
          schema:
            type: string
        - name: limit
          in: query
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: A list of document objects and a list of high level topics.
          content:
            application/json:
              example:
                - docs:
                  - doc_id: doc_id_1
                    text: summarize text_1
                    metadata:
                      metadata_field_1 : "example meta info"
                      another_meta_field: "more example meta info such as date, title, etc"
                    predictions:
                      prediction_field_1: 0.83
                      another_prediction_field: 0.03
                    topics:
                      - topic_id: 32
                        short_title: example topic descriptor
                        prevelance: 0.84
                        topic_group_id: 3
                        topic_group_short_title: Short Group Title
                      - topic_id: 68
                        short_title: example topic descriptor2
                        prevelance: 0.05
                        topic_group_id: 5
                        topic_group_short_title: Short Group Title
                - topics:
                  - topic_id: 12
                    short_title: example topic descriptor_1
                    prevelance: 0.31
                    one_sentence_summary: This is a one sentence summary of a topic that exists in the returned documents
                    executive_paragraph_summary: This is a one paragraph .... summary of the topic that exists in the returned documents.
                    topic_group_id: 3
                    topic_group_short_title: Short Group Title
                - topic_groups:
                    topic_group_id: 3
                    topic_group_short_title: Short Group Title
                    prevelance: 0.31
                    one_sentence_summary: This is a one sentence summary of a topic group that exists in the returned documents
                    executive_paragraph_summary: This is a one paragraph .... summary of the topic group that exists in the returned documents.
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                error: unauthorized
                status: 401

  /text/v1/index/{index_id}/doc/commit:
    post:
      summary: Commit Docs 
      tags:
        - text 
      description: >-
        Applies the changes made to the staging index to the production index. 
        This is a locking operation. No data can be uploaded, trained, or committed while a commit is in progress.
      operationId: commitDocs 
      parameters: 
        - name: index_id
          in: path
          required: true
          schema:
            type: string 
      responses:
        '200':
          description: Index Information
          content:
            application/json:
              example:
                index_id: index_a3cd8f52a42b4ee3841dacfe9408d4cd
                name: Index Name 
                state: ready 
              schema:
                $ref: '#/components/schemas/IndexInfo'
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                error: unauthorized
                status: 401
      requestBody:
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/ApiKeyOnly'

  /text/v1/index/{index_id}/doc/unstage:
    post:
      summary: Unstage Docs 
      tags:
        - text 
      description: >-
        Revert all existing changes to the staging index back to the state of the production index.
      operationId: unstageDocs 
      parameters: 
        - name: index_id
          in: path
          required: true
          schema:
            type: string 
      responses:
        '200':
          description: Index Information
          content:
            application/json:
              example:
                index_id: index_a3cd8f52a42b4ee3841dacfe9408d4cd
                name: Index Name 
                state: ready 
              schema:
                $ref: '#/components/schemas/IndexInfo'
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                error: unauthorized
                status: 401
      requestBody:
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/ApiKeyOnly'

  /text/v1/index/{index_id}/train:
    post:
      summary: Train an Index 
      tags:
        - text 
      description: >-
        This endpoint trains on all docs that live in the production index.
        Once an index has been trained, the docs are queryable and the model
        is able to automatically index all new uploaded docs and (if relevant) run predictions.
      operationId: trainIndex 
      parameters: 
        - name: index_id
          in: path
          required: true
          schema:
            type: string 
      responses:
        '200':
          description: Index Information
          content:
            application/json:
              example:
                index_id: index_a3cd8f52a42b4ee3841dacfe9408d4cd
                name: Index Name 
                state: training 
              schema:
                $ref: '#/components/schemas/IndexInfo'
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                error: unauthorized
                status: 401
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/trainIndexParameters'

servers:
  - url: https://lit.review/api
    description: Production server
security:
  - api_key: []
components:
  securitySchemes:
    api_key:
      type: apiKey
      name: api_key
      in: query
      description: >-
        API Key authentication.

        API requires a DEV API key.
        To obtain one, please follow these steps:
          - email hello@lit.review requesting an api key
  schemas:
    ApiKeyOnly:
      description: Api Key 
      type: object
      properties:
        api_key:
          type: string
    createIndexInput:
      description: Information Needed to create an index 
      type: object
      properties:
        api_key:
          type: string
        name:
          type: string
    IndexInfo:
      description: Index Information 
      type: object
      properties:
        index_id:
          type: string
        state:
          type: string
        name:
          type: string
        already_exists:
          type: boolean
    trainIndexParameters:
      description: Available parameters to train an index 
      type: object
      properties:
        api_key:
          type: string
        label_field_names:
          description: >-
            A list of fields that denote binary labels. The model
            will use these fields as training data and predict their
            values for all future docs to be uploaded. Valid values for field1 in each doc are `1,0,-1,True,False,NULL`


            Example `["field1","field2"]`. Predictions will be made written to `pred_field1` and `pred_field2`.
          type: array
          items: 
            type: string
        tag_field_names:
          description: >-
            A list of fields that contain tags. E.g. if a doc has an attribute `genre` it might be tagged with string `fiction,non-fiction,sci-fi`. The presence of a tag implies a True and the absence of a tag implies a False for training input. If that is not that case, consider manually converting your tags to binary and passing those fields into the `label_field_names`
          type: array
          items: 
            type: string
        doc_hierarchy:
          description: >-
            This is used for adding hierarchy to the indexing model by leveraging attributes present in the uploaded data. This is a more advanced feature for those familiar with Bayesian analysis. 
          type: array
          items: 
            type: string
    DocPredictions:
      description: Return value of writing docs 
      type: object
      properties:
        doc_id: 
          type: string 
        predictions:
          type: object
          properties:
            field_you_choose_for_predictions_1:
              type: number 
            another_field_you_choose_for_predictions:
              type: number
    DocUploadInfo:
      description: Example of doc upload schema 
      type: object
      properties:
        api_key:
          type: string
        save:
          description: >-
            If `true` (default), save the docs to the staging index. 
              If `false`, drop the docs after processing. This is useful for obtaining prediction results without locking or changing the index.

          type: boolean
        docs:
          type: array
          items:
            type: object
            properties:
              doc: 
                type: string 
                description: The core content you want indexed.
              doc_id: 
                type: string 
                description: Will use if provided. Otherwise will be generated as a sha of the content. If you a doc_id already exists in the index, the conflicting fields will use the new doc information.
              boolean_metadata_field_1:
                type: boolean
              any_name_can_be_used:
                type: boolean
              tag_metadata:
                type: array
                items: 
                  type: string
              tag_metadata_any_name:
                type: array
                items: 
                  type: string
              metadata_field_26:
                type: number
              any_other_metadata_name:
                type: array
                items: 
                  type: integer
