openapi: 3.0.3
info:
  title: Sturdy Statistics API Documentation
  version: 1.0.0
  license:
    name: unlicensed
    url: "www.sturdystatistics.com"
  description: |-
    Documentation for the suite Sturdy Statistics API solutions.

paths:
  /text/v1/index:
    post:
      summary: Create Index 
      tags:
        - api/text/v1 
      description: >-
        Creates a new index.

        An index is the core data structure for storing data.  Once the index is trained (see documentation for the `train` endpoint), an index may also be used to search, query, and analyze data.

        If an index with the provided name already exists, no index will be created and the metadata of that index will be returned.
      operationId: createIndex 
      parameters: []
      responses:
        '200':
          description: New Index Information
          content:
            application/json:
              example:
                index_id: index_a3cd8f52a42b4ee3841dacfe9408d4cd
                name: Index Name 
                state: untrained 
                already_exists: false
              schema:
                $ref: '#/components/schemas/IndexInfo'
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                error: unauthorized
                status: 401
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createIndexInput'
    get:
      summary: List Indices
      tags:
        - api/text/v1
      description: Returns a list of all indices tied to your API key.
      operationId: listIndicies 
      parameters:
        - name: api_key
          in: header 
          required: true
          description: API Key.
          schema:
            type: string
      responses:
        '200':
          description: A list of index metadata
          content:
            application/json:
              example:
                - index_id: index_a3cd8f52a42b4ee3841dacfe9408d4cd
                  name: Index_Name_1 
                  state: untrained 
                  already_exists: false
              schema:
                items:
                  $ref: '#/components/schemas/IndexInfo'
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                error: unauthorized
                status: 401
                
  /text/v1/index/{index_id}:
    get:
      summary: Single Index Info
      tags:
        - api/text/v1
      description: Returns all metadata belonging to the specified index.
      operationId: getSingleIndexInfo 
      parameters:
        - name: index_id
          in: path
          required: true
          schema:
            type: string 
        - name: api_key
          in: query
          required: true
          description: API Key.
          schema:
            type: string
      responses:
        '200':
          description: A dictionary of index metadata
          content:
            application/json:
              example:
                index_id: index_a3cd8f52a42b4ee3841dacfe9408d4cd
                name: Index_Name_1 
                state: untrained 
              schema:
                $ref: '#/components/schemas/IndexInfo'
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                error: unauthorized
                status: 401

  /text/v1/index/{index_id}/doc:
    post:
      summary: Upload Docs 
      tags:
        - api/text/v1 
      description: >-
        Uploads documents to a temporary staging index for processing and/or storage.  Documents are processed by the AI model if the index has been trained (see the `train` endpoint), and are stored if the parameter `save=true`.


        Documents are provided as a list of dictionaries.  The content of each document must be plain text and is provided under the required field `doc`.  You may provide a unique document identifier under the optional field `doc_id`.  If no `doc_id` is provided, we will create an identifier by hashing the contents of the document.  Documents can be updated via an upsert mechanism that matches on `doc_id`.  If `doc_id` is not provided and two docs have identical content, the most recently uploaded document will upsert the previously uploaded document.


        Any additional fields in the document dictionary are stored within the index as metadata and will become available for training and querying tasks (see documentation for the `train` and `query` endpoints).  While arbitrary metadata may be included and later queried, "binary" and "tag" data are required for supervised training of an index (no metadata is required for unsupervised training).  See the documentation for `label_field_names` and `tag_field_names` in the `train` endpoint for more information about the required formats.


        If the index has been trained, the response contains `predictions` produced by the trained AI model for each document.  In order to obtain predictions without locking or mutating the index, set `save=false`.  

        If you wish to update an existing doc's metadata, you can do a `shallow update` by leaving the `doc` content field either empty or unchanged. The shallow update will the skip the model inference step and only update/append the metadata fields passed into the api. This provides a significant speedup to the api call.


        Uploading docs is a locking operation.  A client cannot call upload, train or commit while an upload is already in progress.  Consequently, the operation is more efficient with batches of documents.  The API supports a batch size of up to 1000 documents at a time.  The larger the batch size, the more efficient the upload.

        ### Nota Bene
        
        Uploaded documents are saved in a `staging` index.  The index is unaffected until a `commit` request is sent.

      operationId: writeDocs 
      parameters: 
        - name: index_id
          in: path
          required: true
          schema:
            type: string 
      responses:
        '200':
          description: Index Information
          content:
            application/json:
              example:
                - doc_id: "doc1"
                  predictions:
                    prediction_class_1: 0.84
                    prediction_class_2: 0.04
                - doc_id: "doc2"
                  predictions:
                    prediction_class_1: 0.84
                    prediction_class_2: 0.04
              schema:
                items:
                  $ref: '#/components/schemas/DocPredictions'
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                error: unauthorized
                status: 401
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocUploadInfo'
    get:
      summary: Query Docs 
      tags:
        - api/text/v1
      description: >-
        Queries the specified index.  Queries are flexible, and may contain any combination of:

        1. SQL conditionals applied to metadata stored in the index.  See documentation for the `filters` parameter.  Note that this option requires metadata to be stored in the index; see documentation for the `upload` endpoint.

        2. Thematic grouping as identified by the trained AI model.  You may filter by either a single topic group (`topic_group_id`) or by an arbitrary list of specific topics (`topic_ids`).  Note that these options require the index to have been trained. You may filter by either `topic_ids` or by `topic_group_id` but not both simultaneously.

        3. Search.  The query may include a search term to filter documents.  The search is semantic, based on inferred thematic content, but terms enclosed in double quotes will impose an exact match filter.  See documentation for the `query` parameter.


        The API returns a dictionary containing three different entries.  Each entry provides a distinct view into how the data in the index matches your query, with increasing degrees of abstraction:

        1. A ranked list of document objects.  This provides a direct list of documents matching the query.  By default these documents are sorted by relevance, but you may optionally specify any metadata field to sort by (see documentation for the `sort_by` parameter).  Each result contains a short excerpt from the document that evinces your query; see documentation for the `summarize_by` parameter for information about this excerpt.  Each result also contains all prediction values associated with the document, all metadata fields associated with the document, and an ordered list of the topics associated with the document.

        2. A ranked list of topic objects.  This thematic information is abstracted from the documents in the index, but still provides a granular summary of the content present in the data which matches the query.  These topic objects are sorted by prevalence (i.e., % occurrence), not relevance (i.e., degree of match to the query).  Each topic has a `topic_id` that can be used for additional downstream queries (see documentation for the `topic_ids` parameter).

        3. A ranked list of topic group objects.  This provides the highest-level overview of the content in the index which matches the query.  These are also sorted by prevalence.  Each topic group has a `topic_group_id` that can be used for additional downstream queries (see documentation for the `topic_group_id` parameter).

      operationId: getDocs 
      parameters:
        - name: index_id
          in: path
          required: true
          schema:
            type: string 
        - name: api_key
          in: header 
          required: true
          description: Api Key
          schema:
            type: string
        - name: query 
          in: query
          required: false
          description: >-
            A search query that can be used to filter or sort document objects. 
            By default the search will support a fuzzy match. Any word wrapped in double quotes \"word\" 
            will be treated as an exact match filter.
          schema:
            type: string
        - name: topic_ids 
          in: query
          required: false
          description: >-
            Supports filtering on a single or multiple topics. 
            Topics are unsupervised granular themes inferred from the clients data at training time that can be used to index the data.
            Expected input format is a comma separated list of topic_ids eg `1,12,25` 
          schema:
            type: string
        - name: topic_group_id 
          in: query
          required: false
          description: >-
            Supports filtering on a single topic group. 
            Topic groups are unsupervised high level (rather than granular) categories learned from the clients data at training time that can be used to index the data.
            Expected input format is a single integer. 
          schema:
            type: integer 
        - name: filters 
          in: query
          required: false
          description: >-
            `filters` is a string of SQL conditionals that defines the boolean criteria for your query. 
            The filters clause supports any operation available in [duckdb](https://duckdb.org/docs/sql/functions/overview).
            The filters can operate on any metadata you have uploaded and on any prediction values tied to your data.
            Example filter -- `published > "2024-01-01" AND pred_sale > .8`
          schema:
            type: string
        - name: sort_by 
          in: query
          required: false
          description: >-
            Define a field by which to sort. By default, the docs will be sorted by `relevance`.
            The client can choose to sort by any value present in its metadata.
          schema:
            type: string
        - name: ascending 
          in: query
          required: false
          schema:
            type: boolean 
        - name: context 
          in: query
          required: false
          description: >-
            The number of paragraphs above and below the selected excerpt to return.
          schema:
            type: integer
        - name: limit
          in: query
          required: false
          schema:
            type: integer
        - name: offset 
          in: query
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: A list of document objects and a list of high level topics.
          content:
            application/json:
              example:
                - docs:
                  - doc_id: doc_id_1
                    text: summarize text_1
                    metadata:
                      metadata_field_1 : "example meta info"
                      another_meta_field: "more example meta info such as date, title, etc"
                    predictions:
                      prediction_field_1: 0.83
                      another_prediction_field: 0.03
                    topics:
                      - topic_id: 32
                        short_title: example topic descriptor
                        prevalence: 0.84
                        topic_group_id: 3
                        topic_group_short_title: Short Group Title
                      - topic_id: 68
                        short_title: example topic descriptor2
                        prevalence: 0.05
                        topic_group_id: 5
                        topic_group_short_title: Short Group Title
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                error: unauthorized
                status: 401

  /text/v1/index/{index_id}/doc/{doc_id}:
    get:
      summary: Query Docs by ID 
      tags:
        - api/text/v1
      description: >-
        Loads a specified set of docs from the index. Supports a comma separated list of up to 500 doc_ids at a time.

        Additionally, the api provides the ability to specify the summary style of the docs by providing either a comma separated list of `topic_ids`, a `topic_group_id`, or a search `query`. The api will extract the most thematically relevant section of the doc to return. 

        The API returns a dictionary containing field `docs` that contains a list of document objects in the order specified in the query.

      operationId: loadDocs 
      parameters:
        - name: index_id
          in: path
          required: true
          schema:
            type: string 
        - name: doc_id
          in: path
          required: true
          description: >-
            A comma separated list of `doc_id`s. The api supports up to 500 per request.
          schema:
            type: string 
        - name: api_key
          in: header 
          required: true
          description: Api Key
          schema:
            type: string
        - name: query 
          in: query
          required: false
          description: >-
            A search query that can be used to summarize document objects. 
          schema:
            type: string
        - name: topic_ids 
          in: query
          required: false
          description: >-
            Supports matching on a single or multiple topics for granular summaries
            Topics are unsupervised granular themes inferred from the clients data at training time that can be used to index the data.
            Expected input format is a comma separated list of topic_ids eg `1,12,25` 
          schema:
            type: string
        - name: topic_group_id 
          in: query
          required: false
          description: >-
            Supports matching on a single topic group for high leve summaries.
            Topic groups are unsupervised high level (rather than granular) categories learned from the clients data at training time that can be used to index the data.
            Expected input format is a single integer. 
          schema:
            type: integer 
        - name: context 
          in: query
          required: false
          description: >-
            The number of paragraphs above and below the selected excerpt to return.
          schema:
            type: integer
      responses:
        '200':
          description: A list of document objects and a list of high level topics.
          content:
            application/json:
              example:
                - docs:
                  - doc_id: doc_id_1
                    text: summarize text_1
                    metadata:
                      metadata_field_1 : "example meta info"
                      another_meta_field: "more example meta info such as date, title, etc"
                    predictions:
                      prediction_field_1: 0.83
                      another_prediction_field: 0.03
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                error: unauthorized
                status: 401

  /text/v1/index/{index_id}/doc/meta:
    get:
      summary: Query Doc Meta 
      tags:
        - api/text/v1
      description: >-
        This api allows you to directly run arbitrary
        SQL queries against you index's metadata. The availab
        fields include `doc_id` as well as any metadata you uploaded
        to your documents.
      operationId: getDocMeta
      parameters:
        - name: index_id
          in: path
          required: true
          schema:
            type: string 
        - name: api_key
          in: header 
          required: true
          description: API Key.
          schema:
            type: string
        - name: query
          in: query
          required: true
          description: >-
            `query` is a SQL query that defines the data you are interested in. The statment must query the `doc_meta` table for document level information or the `doc_meta_para` table for paragraph level information.

            The SQL query supports any operation available in [duckdb](https://duckdb.org/docs/sql/functions/overview).
            Example query -- `SELECT doc_id FROM doc_meta WHERE published > "2024-01-01" AND pred_sale > .8`
          schema:
            type: string
      responses:
        '200':
          description: A list of dictionaries containing whatever fields you selected. 
          content:
            application/json:
              example:
                - doc_id: "uuid4"
                  pred_sale: .4
                  date: "2024-01-01"
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                error: unauthorized
                status: 401

  /text/v1/index/{index_id}/doc/commit:
    post:
      summary: Commit Docs 
      tags:
        - api/text/v1 
      description: >-
        Permanently applies all changes made to the staging index to the production index.  Note that `upload` saves new documents only to the staging index; a `commit` is necessary to use those documents for querying or for training.  This is a locking operation: no data can be uploaded, trained, or committed while a commit is in progress.
      operationId: commitDocs 
      parameters: 
        - name: index_id
          in: path
          required: true
          schema:
            type: string 
      responses:
        '200':
          description: Index Information
          content:
            application/json:
              example:
                index_id: index_a3cd8f52a42b4ee3841dacfe9408d4cd
                name: Index Name 
                state: ready 
              schema:
                $ref: '#/components/schemas/IndexInfo'
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                error: unauthorized
                status: 401
      requestBody:
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/ApiKeyOnly'

  /text/v1/index/{index_id}/doc/unstage:
    post:
      summary: Unstage Docs 
      tags:
        - api/text/v1 
      description: >-
        Reverts all changes to the staging index back, and resets the staging index to match the state of the production index.
      operationId: unstageDocs 
      parameters: 
        - name: index_id
          in: path
          required: true
          schema:
            type: string 
      responses:
        '200':
          description: Index Information
          content:
            application/json:
              example:
                index_id: index_a3cd8f52a42b4ee3841dacfe9408d4cd
                name: Index Name 
                state: ready 
              schema:
                $ref: '#/components/schemas/IndexInfo'
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                error: unauthorized
                status: 401
      requestBody:
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/ApiKeyOnly'

  /text/v1/index/{index_id}/clone:
    post:
      summary: Clone Index 
      tags:
        - api/text/v1 
      description: >-
        Create a deep copy of the selected index.
      operationId: cloneIndex 
      parameters: 
        - name: index_id
          in: path
          required: true
          schema:
            type: string 
      responses:
        '200':
          description: New Index Information
          content:
            application/json:
              example:
                index_id: index_a3cd8f52a42b4ee3841dacfe9408d4cd
                name: Index Name 
                state: ready 
              schema:
                $ref: '#/components/schemas/IndexInfo'
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                error: unauthorized
                status: 401
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                new_name:
                  type: string

  /text/v1/index/{index_id}/delete:
    post:
      summary: Delete Index 
      tags:
        - api/text/v1 
      description: >-
        Create a deep copy of the selected index.
      operationId: deleteIndex 
      parameters: 
        - name: index_id
          in: path
          required: true
          schema:
            type: string 
      responses:
        '200':
          description: New Index Information
          content:
            application/json:
              example:
                index_id: index_a3cd8f52a42b4ee3841dacfe9408d4cd
                name: Index Name 
                state: ready 
              schema:
                $ref: '#/components/schemas/IndexInfo'
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                error: unauthorized
                status: 401
      requestBody:
        content:
          application/json: {}

  /text/v1/index/{index_id}/train:
    post:
      summary: Train Index 
      tags:
        - api/text/v1 
      description: >-
        Trains an AI model on all documents in the production index.  Once an index has been trained, documents are queryable (see documentation for the `query` endpoint), and the model automatically processes subsequently uploaded documents (see documentation for the `upload` endpoint).


        The AI model identifies thematic information in documents, permitting semantic indexing and semantic search.  It also enables quantitative analysis of, e.g., topic trends.


        The AI model may optionally be supervised using metadata present in the index.  Thematic decomposition of the data is not unique; supervision guides the model and aligns the identified topics to your intended application.  Supervision also allows the model to make predictions.


        Data for supervision may be supplied explicitly using the `label_field_names` parameter.  Metadata field names listed in this parameter must each store data in a ternary true/false/unknown format.  For convenience, supervision data may also be supplied in a sparse "tag" format using the `tag_field_names` parameter.  Metadata field names listed in this parameter must contain a list of labels for each document.  The document is considered "true" for each label listed; it is implicitly considered "false" for each label not listed.  Consequently, the "tag" format does not allow for unknown labels.  Any combination of `label_field_names` and `tag_field_names` may be supplied.

      operationId: trainIndex 
      parameters: 
        - name: index_id
          in: path
          required: true
          schema:
            type: string 
      responses:
        '200':
          description: Index Information
          content:
            application/json:
              example:
                  index_id: index_a3cd8f52a42b4ee3841dacfe9408d4cd
                  name: Index Name 
                  state: training 
              schema:
                $ref: '#/components/schemas/IndexInfo'
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                error: unauthorized
                status: 401
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/trainIndexParameters'
  /text/v1/index/{index_id}/topic/diff:
    get:
      summary: Topic Diff
      tags:
        - api/text/v1
      description: >-
        Returns most conditionally prevalent topics information.
      operationId: getTopicDiff 
      parameters:
        - name: index_id
          in: path
          required: true
          schema:
            type: string 
        - name: api_key
          in: header 
          required: true
          description: API Key.
          schema:
            type: string
        - name: q1 
          in: query
          required: true
          description: >-
            `q1` is a string of SQL conditionals that defines the boolean criteria for your query. This query should denote the subset of data for which you are interested obtaining a high level summary.


            The SQL clause supports any operation available in [duckdb](https://duckdb.org/docs/sql/functions/overview).
            The SQL clause can operate on any metadata you have uploaded and on any prediction values tied to your data.
            Example q1 filter -- `published > "2024-01-01" AND pred_sale > .8`
          schema:
            type: string
        - name: q2
          in: query
          required: false 
          description: >-
            `q2` is a string of SQL conditionals that defines the boolean criteria for your query. This query should denote the set of data against which you want to compare your `q1` filter. This field is optional and by default `q1` is compared against the entire corpus.  

            The SQL clause supports any operation available in [duckdb](https://duckdb.org/docs/sql/functions/overview).
            The SQL clause can operate on any metadata you have uploaded and on any prediction values tied to your data.
            Example q1 filter -- `published > "2024-01-01" AND pred_sale > .8`
          schema:
            type: string
        - name: min_confidence
          in: query
          schema:
            type: number
          required: false
          description: >-
            Sets a minimum confidence threshold between 0-1 that a topic changed when comparing q1 to q2.
            
      responses:
        '200':
          description: A dictionary containing a list of sorted topic diffs. 
          content:
            application/json:
              example:
                topics:
                  - topic_id: 12
                    short_title: "Topic Title"
                    one_sentence_summary: "One sentence summary of the topic"
                    executive_paragraph_summary: "Longer summary of a topic"
                    prevalence_ratio: 8.3
                    prevalence: .13
                    confidence: 98
                    topic_group_id: 2
                    topic_group_short_title: "Group Title"
                  - topic_id: 12
                    short_title: "Topic Title"
                    one_sentence_summary: "One sentence summary of the topic"
                    executive_paragraph_summary: "Longer summary of a topic"
                    prevalence_ratio: 8.3
                    prevalence: .13
                    confidence: 98
                    topic_group_id: 2
                    topic_group_short_title: "Group Title"
              schema:
                items:
                  $ref: '#/components/schemas/TopicDiffInfo'
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                error: unauthorized
                status: 401

  /text/v1/index/{index_id}/topic/search:
    get:
      summary: Topic Search
      tags:
        - api/text/v1
      description: >-
        Returns most conditionally prevalent topics information.
      operationId: getTopicSearch
      parameters:
        - name: index_id
          in: path
          required: true
          schema:
            type: string 
        - name: api_key
          in: header 
          required: true
          description: API Key.
          schema:
            type: string
        - name: query 
          in: query
          required: false
          description: >-
            A search query that can be used to summarize document objects. 
          schema:
            type: string
        - name: filters 
          in: query
          required: false
          description: >-
            `filters` is a string of SQL conditionals that defines the boolean criteria for your query. 
            The filters clause supports any operation available in [duckdb](https://duckdb.org/docs/sql/functions/overview).
            The filters can operate on any metadata you have uploaded and on any prediction values tied to your data.
            Example filter -- `published > "2024-01-01" AND pred_sale > .8`
          schema:
            type: string
        - name: doc_id
          in: query 
          required: true
          description: >-
            A comma separated list of `doc_id`s. The api supports up to 500 per request.
          schema:
            type: string 
            
      responses:
        '200':
          description: A dictionary containing a list of sorted topic diffs. 
          content:
            application/json:
              example:
                topics:
                  - topic_id: 12
                    short_title: "Topic Title"
                    one_sentence_summary: "One sentence summary of the topic"
                    executive_paragraph_summary: "Longer summary of a topic"
                    prevalence: .13
                    topic_group_id: 2
                    topic_group_short_title: "Group Title"
                  - topic_id: 12
                    short_title: "Topic Title"
                    one_sentence_summary: "One sentence summary of the topic"
                    executive_paragraph_summary: "Longer summary of a topic"
                    prevalence: .13
                    topic_group_id: 2
                    topic_group_short_title: "Group Title"
              schema:
                items:
                  $ref: '#/components/schemas/TopicSearchInfo'
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                error: unauthorized
                status: 401


servers:
  - url: https://sturdystatistics.com/api
    description: Production server
security:
  - api_key: []
components:
  securitySchemes:
    api_key:
      type: apiKey
      name: api_key
      in: header
      description: >-
        API Key authentication.

        API requires a DEV API key.
        To obtain one, please follow these steps:
          - email hello@lit.review requesting an API key
  schemas:
    ApiKeyOnly:
      description: API Key 
      type: object
      properties:
        api_key:
          type: string
    createIndexInput:
      description: Information Needed to create an index 
      type: object
      properties:
        name:
          type: string
    IndexInfo:
      description: Index Information 
      type: object
      properties:
        index_id:
          type: string
        state:
          type: string
        name:
          type: string
        already_exists:
          type: boolean
    trainIndexParameters:
      description: Available parameters to train an index 
      type: object
      properties:
        label_field_names:
          description: >-
            A list of fields that denote binary labels. The model
            will use these fields as training data and predict their
            values for all future docs to be uploaded. Valid values for field1 in each doc are `1,0,-1,True,False,NULL`


            Example `["field1","field2"]`. Predictions will be made written to `pred_field1` and `pred_field2`.
          type: array
          items: 
            type: string
        tag_field_names:
          description: >-
            A list of fields that contain tags. E.g. if a doc has an attribute `genre` it might be tagged with string `fiction,non-fiction,sci-fi`. The presence of a tag implies a True and the absence of a tag implies a False for training input. If that is not that case, consider manually converting your tags to binary and passing those fields into the `label_field_names`
          type: array
          items: 
            type: string
        doc_hierarchy:
          description: >-
            This is used for adding hierarchy to the indexing model by leveraging attributes present in the uploaded data. This is a more advanced feature for those familiar with Bayesian analysis. 
          type: array
          items: 
            type: string
        K:
          description: >-
            This parameter sets the maximum number of topics to learn from the data. We support a range of 32-512, with a default of 192. The runtime of training is linear with the number of topics. 
          type: string 
    DocPredictions:
      type: object
      properties:
        doc_id:
          type: string
          description: Unique identifier of the document.
        predictions:
          type: object
          description: Prediction scores for each class.
          additionalProperties:
            type: number
            format: float
          example:
            prediction_class_1: 0.84
            prediction_class_2: 0.04
    TopicDiffInfo:
      description: Example of doc upload schema 
      type: object
      properties:
        topics:
          type: object
          properties:
            topic_id:
              type: integer
            short_title:
              type: string
            one_sentence_summary:
              type: string
            executive_paragraph_summary:
              type: string
            prevalence_ratio:
              type: number 
            prevalence:
              type:  number
            confidence:
              type: integer
            topic_group_id:
              type: integer
            topic_group_short_title:
              type: string
    TopicSearchInfo:
      description: Example of doc upload schema 
      type: object
      properties:
        topics:
          type: object
          properties:
            topic_id:
              type: integer
            short_title:
              type: string
            one_sentence_summary:
              type: string
            executive_paragraph_summary:
              type: string
            prevalence:
              type:  number
            topic_group_id:
              type: integer
            topic_group_short_title:
              type: string
    DocUploadInfo:
      description: Example of doc upload schema 
      type: object
      properties:
        save:
          description: >-
            If `true` (default), save the docs to the staging index. 
              If `false`, drop the docs after processing. This is useful for obtaining prediction results without locking or changing the index.

          type: boolean
        docs:
          type: array
          items:
            type: object
            properties:
              doc: 
                type: string 
                description: The document content (as plain text) that you want indexed.
              doc_id: 
                type: string 
                description: Will use if provided. Otherwise will be generated as a sha of the content. If you a doc_id already exists in the index, the conflicting fields will use the new doc information.
              boolean_metadata_field_1:
                type: boolean
              any_name_can_be_used:
                type: boolean
              tag_metadata:
                type: array
                items: 
                  type: string
              tag_metadata_any_name:
                type: array
                items: 
                  type: string
              metadata_field_26:
                type: number
              any_other_metadata_name:
                type: array
                items: 
                  type: integer
